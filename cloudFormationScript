AWSTemplateFormatVersion: 2010-09-09

Parameters:
  KeyName:
    Type: String
    Description: Keyname for the keypair that Qwiklab will use
    Default: lab-key-pair

  AMZN2LinuxAMIId:
    Type : AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

  UserPassword:
    Description: "User password."
    Type: String
    Default: Passw0rd!

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: Lab VPC

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private Subnet 2

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table

  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  WebInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMZN2LinuxAMIId
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: 'true'
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref WebSecurityGroup
      SourceDestCheck: 'false'
      Tags:
        - Key: Name
          Value: Web Server 1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          # Updated to use Amazon Linux 2023
          dnf update -y
          dnf install -y httpd wget php-fpm php-mysqli php-json php php-devel
          dnf install -y mariadb105-server
          /usr/bin/systemctl enable httpd
          /usr/bin/systemctl start httpd
          cd /var/www/html
          wget https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/CUR-TF-100-ACCLFO-2/lab6-scaling/lab-app.zip
          unzip lab-app.zip -d /var/www/html/
          chown apache:root /var/www/html/rds.conf.php

  WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access
      GroupName: Web Security Group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Web Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  # NAT Gateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt
        - NATGatewayEIP
        - AllocationId

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway

  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: DB Security Group
      GroupName: DB Security Group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref WebSecurityGroup

  DBsubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Lab DB Subnet Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  IAMUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: awsstudent
      LoginProfile:
        Password: !Ref UserPassword
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        #- !Sub arn:aws:iam::${AWS::AccountId}:policy/IAMPolicy

  IAMPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    DependsOn:
        - IAMUser
        - LabRole
    Properties:
      ManagedPolicyName: IAMPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement: [{
            "Sid": "AllowAllActions",
            "Effect": "Allow",
            "Action": [
                "autoscaling:AttachInstances",
                "autoscaling:*AutoScalingGroup",
                "autoscaling:Describe*",
                "autoscaling:DetachInstances",
                "autoscaling:*Tags",
                "autoscaling:*Configuration",
                "autoscaling:*Hook",
                "autoscaling:*Lifecycle*",
                "autoscaling:*LoadBalancer*",
                "autoscaling:*Metrics*",
                "autoscaling:*Policy",
                "autoscaling:*Processes",
                "autoscaling:*Standby",
                "autoscaling:*Scheduled*",
                "autoscaling:SetInstanceHealth",
                "autoscaling:SetDesiredCapacity",
                "autoscaling:SetInstanceProtection",
                "cloudformation:List*",
                "cloudformation:Describe*",
                "cloudformation:Detect*",
                "cloudformation:EstimateTemplateCost",
                "cloudformation:Get*",
                "cloudwatch:Describe*",
                "cloudwatch:Get*",
                "cloudwatch:List*",
                "config:Describe*",
                "cloudtrail:GetTrailStatus",
                "cloudtrail:DescribeTrails",
                "cloudtrail:LookupEvents",
                "cloudtrail:ListTags",
                "cloudtrail:ListPublicKeys",
                "cloudtrail:GetEventSelectors",
                "ec2:*Address*",
                "ec2:Cancel*",
                "ec2:Describe*",
                "ec2:*Gateway",
                "ec2:Get*",
                "ec2:*Image*",
                "ec2:*Network*",
                "ec2:*Route*",
                "ec2:*SecurityGroup*",
                "ec2:*Snapshot*",
                "ec2:*Subnet*",
                "ec2:*Vpc*",
                "ec2:*Vpn*",
                "ec2:DeleteFleets",
                "ec2:ResetEbsDefaultKmsKeyId",
                "ec2:ReportInstanceStatus",
                "ec2:ImportKeyPair",
                "ec2:StopInstances",
                "ec2:ProvisionByoipCidr",
                "ec2:WithdrawByoipCidr",
                "ec2:AssociateDhcpOptions",
                "ec2:ConfirmProductInstance",
                "ec2:ConfirmProductInstance",
                "ec2:ModifyFpgaImageAttribute",
                "ec2:EnableEbsEncryptionByDefault",
                "ec2:SendDiagnosticInterrupt",
                "ec2:AssociateIamInstanceProfile",
                "ec2:ReplaceIamInstanceProfileAssociation",
                "ec2:CreateDhcpOptions",
                "ec2:DeleteDhcpOptions",
                "ec2:CreateKeyPair",
                "ec2:DeleteKeyPair",
                "ec2:BundleInstance",
                "ec2:CreateTags",
                "ec2:DisassociateIamInstanceProfile",
                "ec2:AttachVolume",
                "ec2:CreateInstanceExportTask",
                "ec2:MonitorInstances",
                "ec2:UnmonitorInstances",
                "ec2:DetachVolume",
                "ec2:DeleteVolume",
                "ec2:DeleteLaunchTemplate*",
                "ec2:CreateFlowLogs",
                "ec2:DeleteFlowLogs",
                "ec2:ModifyIdentityIdFormat",
                "ec2:ModifyIdFormat",
                "ec2:AdvertiseByoipCidr",
                "ec2:DeprovisionByoipCidr",
                "ec2:DeleteTags",
                "ec2:TerminateInstances",
                "ec2:DisableEbsEncryptionByDefault",
                "ec2:ModifyEbsDefaultKmsKeyId",
                "elasticloadbalancing:AddListenerCertificates",
                "elasticloadbalancing:Modify*",
                "elasticloadbalancing:RegisterTargets",
                "elasticloadbalancing:Set*",
                "elasticloadbalancing:RemoveListenerCertificates",
                "elasticloadbalancing:DeleteLoadBalancer",
                "elasticloadbalancing:Describe*",
                "elasticloadbalancing:CreateListener",
                "elasticloadbalancing:CreateRule",
                "elasticloadbalancing:DeleteRule",
                "elasticloadbalancing:CreateLoadBalancer",
                "elasticloadbalancing:*TargetGroup",
                "elasticloadbalancing:DeregisterTargets",
                "elasticloadbalancing:*Tags",
                "elasticloadbalancing:DeleteListener",
                "events:Describe*",
                "events:List*",
                "events:TestEventPattern",
                "iam:List*",
                "iam:Get*",
                "logs:List*",
                "logs:Describe*",
                "logs:Get*",
                "logs:StartQuery",
                "logs:StopQuery",
                "logs:TestMetricFilter",
                "logs:FilterLogEvents",
                "resource-groups:Get*",
                "resource-groups:List*",
                "resource-groups:SearchResources",
                "sns:TagResource",
                "sns:Delete*",
                "sns:List*",
                "sns:Unsubscribe",
                "sns:Set*",
                "sns:UntagResource",
                "sns:OptInPhoneNumber",
                "sns:CheckIfPhoneNumberIsOptedOut",
                "sns:Publish",
                "sns:Subscribe",
                "sns:ConfirmSubscription",
                "sns:RemovePermission",
                "sns:Get*",
                "sns:Create*",
                "sns:AddPermission",
                "s3:ListAllMyBuckets",
                "s3:GetObject",
                "s3:GetBucketLocation",
                "kms:ListAliases",
                "lambda:ListFunctions",
                "tag:*"
            ],
            "Resource": "*"
        },
        {
            "Sid": "RestrictInstanceActions",
            "Effect": "Allow",
            "Action": [
                "ec2:CreateVolume",
                "ec2:ModifyVolume",
                "ec2:ImportVolume",
                "ec2:ModifyVolumeAttribute",
                "ec2:ModifyFleet",
                "ec2:ImportSnapshot",
                "ec2:ResetInstanceAttribute",
                "ec2:CreateFleet",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:EnableVolumeIO",
                "ec2:CreateLaunchTemplate",
                "ec2:ImportInstance",
                "ec2:ModifyInstanceCreditSpecification",
                "ec2:ModifyLaunchTemplate",
                "ec2:ModifyInstanceAttribute",
                "ec2:RebootInstances",
                "ec2:RunInstances",
                "ec2:StartInstances"
            ],
            "Resource": "*",
            "Condition": {
                "StringEqualsIfExists": {
                    "ec2:Owner": "amazon"
                },
                "ForAllValues:StringLikeIfExists": {
                    "ec2:InstanceType": [
                        "*.nano",
                        "*.micro",
                        "*.small"
                    ],
                    "ec2:Tenancy": "default"
                },
                "StringNotEqualsIfExists": {
                    "ec2:PlacementGroupStrategy": "cluster"
                },
                "StringNotEqualsIgnoreCaseIfExists": {
                    "ec2:VolumeType": [
                        "io1",
                        "st1"
                    ]
                },
                "NumericLessThanEqualsIfExists": {
                    "ec2:VolumeSize": "51"
                }
            }
        },
        {
            "Sid": "RestrictActions",
            "Effect": "Deny",
            "Action": [
                "ec2:*Spot*",
                "ec2:*ReservedInstances*",
                "ec2:*Scheduled*",
                "ec2:*Purchase*",
                "ec2:EnableFastSnapshotRestores"
            ],
            "Resource": "*"
        },
        {
            "Sid": "RestrictASLCInstanceType",
            "Effect": "Allow",
            "Action": "autoscaling:CreateLaunchConfiguration",
            "Resource": "*",
            "Condition": {
                "ForAnyValue:StringNotLikeIfExists": {
                    "autoscaling:InstanceType": [
                        "*.nano",
                        "*.micro",
                        "*.small"
                    ]
                }
            }
        },
        {
            "Sid": "RestrictASGInstanceTypeAndNo",
            "Effect": "Allow",
            "Action": [
                "autoscaling:UpdateAutoScalingGroup",
                "autoscaling:CreateAutoScalingGroup"
            ],
            "Resource": "*",
            "Condition": {
                "NumericGreaterThanIfExists": {
                    "autoscaling:MaxSize": "6"
                },
                "ForAnyValue:StringNotLikeIfExists": {
                    "autoscaling:InstanceTypes": [
                        "*.nano",
                        "*.micro",
                        "*.small"
                    ]
                }
            }
        },
        {
            "Sid": "ServiceLinkedRoleAndPolicies",
            "Effect": "Allow",
            "Action": [
                "iam:AttachRolePolicy",
                "iam:CreateInstanceProfile",
                "iam:CreateServiceLinkedRole",
                "iam:DetachRolePolicy",
                "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
                "StringLikeIfExists": {
                    "iam:PassedToService": [
                        "elasticloadbalancing.amazonaws.com",
                        "autoscaling.amazonaws.com"
                    ]
                }
            }
        },
        {
          "Sid": "AllowServiceLinkedRoleCreation",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/*"
        }]
      Roles:
        - !Ref LabRole
      Users:
        - !Ref IAMUser

  LabRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "LabRole"
      Path: "/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: LabRole
    Properties:
      InstanceProfileName: "EC2InstanceProfile"
      Path: "/"
      Roles:
      - !Ref LabRole

  IAMUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    DependsOn: IAMUser
    Properties:
      Status: Active
      UserName: awsstudent

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enables SSH access.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: BastionSecurityGroup

  BastionHost:
    Type: AWS::EC2::Instance
    DependsOn:
      - PublicSubnet1RouteTableAssociation
      # CHECK THIS
      - EC2InstanceProfile
    Properties:
      ImageId: !Ref AMZN2LinuxAMIId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true  # Optional as the subnet already has a public IP assigned.
          DeviceIndex: 0
          GroupSet:
            - Ref: BastionSecurityGroup
          SubnetId: !Ref 'PublicSubnet1'
      # CHECK THIS
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          yum update -y
          # This sample installs AWS CLIv2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          rm -rf awscliv2.zip
          rm -rf aws
          alias aws=/usr/local/bin/aws
      Tags:
        -
          Key: Name
          Value: Bastion Host

Outputs:
  WebServer:
    Value: !GetAtt
      - WebInstance
      - PublicIp
    Description: Public IP address of Web Server

  UserAccessSecretKey:
    Description: "User access and secret keys."
    Value: !Join
      - ''
      - - "Access Key: "
        - !Ref IAMUserAccessKey
        - " "
        - "Secret Access Key: "
        - 'Fn::GetAtt':
          - IAMUserAccessKey
          - SecretAccessKey

  UserPassword:
    Description: User password.
    Value: !Ref UserPassword

  BastionHost:
    Description: BastionHost server's public IP address.
    Value: !GetAtt
      - BastionHost
      - PublicIp

  Region:
    Description: The region for the lab.
    Value: !Ref "AWS::Region"
